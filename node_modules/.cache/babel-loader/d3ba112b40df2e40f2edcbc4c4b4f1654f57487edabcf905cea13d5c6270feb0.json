{"ast":null,"code":"// Calculator functions for Revenue Based Finance calculations\n\nexport const calculateSolvedValue = (values, solveFor) => {\n  const monthlyRevenue = values.annualRevenue / 12;\n  const monthlyPayment = monthlyRevenue * (values.revenueShareRate / 100);\n  switch (solveFor) {\n    case 'factorRate':\n      if (values.repaymentPeriod === 0 || monthlyPayment === 0) return 0;\n      const totalRepayment = monthlyPayment * values.repaymentPeriod;\n      return values.loanPrinciple > 0 ? totalRepayment / values.loanPrinciple : 0;\n    case 'loanPrinciple':\n      return values.loanAmount / values.factorRate;\n    case 'loanAmount':\n      return values.loanPrinciple * values.factorRate;\n    case 'loanFee':\n      return values.loanAmount - values.loanPrinciple;\n    case 'revenueShareRate':\n      if (values.repaymentPeriod === 0 || values.annualRevenue === 0) return 0;\n      const requiredMonthlyPayment = values.loanAmount / values.repaymentPeriod;\n      return requiredMonthlyPayment / monthlyRevenue * 100;\n    case 'repaymentPeriod':\n      if (monthlyPayment === 0) return 0;\n      return values.loanAmount / monthlyPayment;\n    case 'profitMargin':\n      // This is independent - would need additional business logic\n      return values.profitMargin;\n    case 'annualRevenue':\n      if (values.revenueShareRate === 0 || values.repaymentPeriod === 0) return 0;\n      const requiredMonthlyRev = values.loanAmount / values.repaymentPeriod;\n      return requiredMonthlyRev / (values.revenueShareRate / 100) * 12;\n    default:\n      return 0;\n  }\n};\nexport const formatValue = (key, value) => {\n  const variables = {\n    factorRate: {\n      label: 'Factor Rate (multiplier)',\n      suffix: 'x',\n      step: 0.1\n    },\n    loanPrinciple: {\n      label: 'Loan Principle',\n      prefix: '$',\n      step: 100\n    },\n    loanAmount: {\n      label: 'Repayment Obligation',\n      prefix: '$',\n      step: 100\n    },\n    loanFee: {\n      label: 'Loan Fee',\n      prefix: '$',\n      step: 100\n    },\n    revenueShareRate: {\n      label: 'Revenue Share Rate',\n      suffix: '%',\n      step: 0.5\n    },\n    repaymentPeriod: {\n      label: 'Repayment Period',\n      suffix: ' months',\n      step: 1\n    },\n    profitMargin: {\n      label: 'Annual Profit Margin',\n      suffix: '%',\n      step: 1\n    },\n    annualRevenue: {\n      label: 'Annual Revenue',\n      prefix: '$',\n      step: 1000\n    }\n  };\n  const variable = variables[key];\n  const formattedValue = key === 'factorRate' ? value.toFixed(2) : key.includes('Rate') || key === 'profitMargin' ? value.toFixed(1) : key === 'repaymentPeriod' ? Math.round(value) : Math.round(value);\n  return `${variable.prefix || ''}${formattedValue}${variable.suffix || ''}`;\n};\nexport const getMonthlyPayment = values => {\n  const monthlyRevenue = values.annualRevenue / 12;\n  return monthlyRevenue * (values.revenueShareRate / 100);\n};\nexport const getRepaymentYears = repaymentPeriod => {\n  return (repaymentPeriod / 12).toFixed(1);\n};\nexport const getEffectiveAnnualRate = (factorRate, repaymentPeriod) => {\n  if (repaymentPeriod === 0 || !factorRate || factorRate <= 0) return 0;\n  const result = (Math.pow(factorRate, 12 / repaymentPeriod) - 1) * 100;\n  return isNaN(result) ? 0 : result;\n};","map":{"version":3,"names":["calculateSolvedValue","values","solveFor","monthlyRevenue","annualRevenue","monthlyPayment","revenueShareRate","repaymentPeriod","totalRepayment","loanPrinciple","loanAmount","factorRate","requiredMonthlyPayment","profitMargin","requiredMonthlyRev","formatValue","key","value","variables","label","suffix","step","prefix","loanFee","variable","formattedValue","toFixed","includes","Math","round","getMonthlyPayment","getRepaymentYears","getEffectiveAnnualRate","result","pow","isNaN"],"sources":["/Users/nateritter/Sites/because-loan-calculator/src/calculator.js"],"sourcesContent":["// Calculator functions for Revenue Based Finance calculations\n\nexport const calculateSolvedValue = (values, solveFor) => {\n  const monthlyRevenue = values.annualRevenue / 12;\n  const monthlyPayment = monthlyRevenue * (values.revenueShareRate / 100);\n\n  switch (solveFor) {\n    case 'factorRate':\n      if (values.repaymentPeriod === 0 || monthlyPayment === 0) return 0;\n      const totalRepayment = monthlyPayment * values.repaymentPeriod;\n      return values.loanPrinciple > 0 ? totalRepayment / values.loanPrinciple : 0;\n\n    case 'loanPrinciple':\n      return values.loanAmount / values.factorRate;\n\n    case 'loanAmount':\n      return values.loanPrinciple * values.factorRate;\n\n    case 'loanFee':\n      return values.loanAmount - values.loanPrinciple;\n\n    case 'revenueShareRate':\n      if (values.repaymentPeriod === 0 || values.annualRevenue === 0) return 0;\n      const requiredMonthlyPayment = values.loanAmount / values.repaymentPeriod;\n      return (requiredMonthlyPayment / monthlyRevenue) * 100;\n\n    case 'repaymentPeriod':\n      if (monthlyPayment === 0) return 0;\n      return values.loanAmount / monthlyPayment;\n\n    case 'profitMargin':\n      // This is independent - would need additional business logic\n      return values.profitMargin;\n\n    case 'annualRevenue':\n      if (values.revenueShareRate === 0 || values.repaymentPeriod === 0) return 0;\n      const requiredMonthlyRev = values.loanAmount / values.repaymentPeriod;\n      return (requiredMonthlyRev / (values.revenueShareRate / 100)) * 12;\n\n    default:\n      return 0;\n  }\n};\n\nexport const formatValue = (key, value) => {\n  const variables = {\n    factorRate: { label: 'Factor Rate (multiplier)', suffix: 'x', step: 0.1 },\n    loanPrinciple: { label: 'Loan Principle', prefix: '$', step: 100 },\n    loanAmount: { label: 'Repayment Obligation', prefix: '$', step: 100 },\n    loanFee: { label: 'Loan Fee', prefix: '$', step: 100 },\n    revenueShareRate: { label: 'Revenue Share Rate', suffix: '%', step: 0.5 },\n    repaymentPeriod: { label: 'Repayment Period', suffix: ' months', step: 1 },\n    profitMargin: { label: 'Annual Profit Margin', suffix: '%', step: 1 },\n    annualRevenue: { label: 'Annual Revenue', prefix: '$', step: 1000 }\n  };\n\n  const variable = variables[key];\n  const formattedValue = key === 'factorRate' ? value.toFixed(2) :\n                        key.includes('Rate') || key === 'profitMargin' ? value.toFixed(1) :\n                        key === 'repaymentPeriod' ? Math.round(value) :\n                        Math.round(value);\n\n  return `${variable.prefix || ''}${formattedValue}${variable.suffix || ''}`;\n};\n\nexport const getMonthlyPayment = (values) => {\n  const monthlyRevenue = values.annualRevenue / 12;\n  return monthlyRevenue * (values.revenueShareRate / 100);\n};\n\nexport const getRepaymentYears = (repaymentPeriod) => {\n  return (repaymentPeriod / 12).toFixed(1);\n};\n\nexport const getEffectiveAnnualRate = (factorRate, repaymentPeriod) => {\n  if (repaymentPeriod === 0 || !factorRate || factorRate <= 0) return 0;\n  const result = ((Math.pow(factorRate, 12/repaymentPeriod) - 1) * 100);\n  return isNaN(result) ? 0 : result;\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,oBAAoB,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EACxD,MAAMC,cAAc,GAAGF,MAAM,CAACG,aAAa,GAAG,EAAE;EAChD,MAAMC,cAAc,GAAGF,cAAc,IAAIF,MAAM,CAACK,gBAAgB,GAAG,GAAG,CAAC;EAEvE,QAAQJ,QAAQ;IACd,KAAK,YAAY;MACf,IAAID,MAAM,CAACM,eAAe,KAAK,CAAC,IAAIF,cAAc,KAAK,CAAC,EAAE,OAAO,CAAC;MAClE,MAAMG,cAAc,GAAGH,cAAc,GAAGJ,MAAM,CAACM,eAAe;MAC9D,OAAON,MAAM,CAACQ,aAAa,GAAG,CAAC,GAAGD,cAAc,GAAGP,MAAM,CAACQ,aAAa,GAAG,CAAC;IAE7E,KAAK,eAAe;MAClB,OAAOR,MAAM,CAACS,UAAU,GAAGT,MAAM,CAACU,UAAU;IAE9C,KAAK,YAAY;MACf,OAAOV,MAAM,CAACQ,aAAa,GAAGR,MAAM,CAACU,UAAU;IAEjD,KAAK,SAAS;MACZ,OAAOV,MAAM,CAACS,UAAU,GAAGT,MAAM,CAACQ,aAAa;IAEjD,KAAK,kBAAkB;MACrB,IAAIR,MAAM,CAACM,eAAe,KAAK,CAAC,IAAIN,MAAM,CAACG,aAAa,KAAK,CAAC,EAAE,OAAO,CAAC;MACxE,MAAMQ,sBAAsB,GAAGX,MAAM,CAACS,UAAU,GAAGT,MAAM,CAACM,eAAe;MACzE,OAAQK,sBAAsB,GAAGT,cAAc,GAAI,GAAG;IAExD,KAAK,iBAAiB;MACpB,IAAIE,cAAc,KAAK,CAAC,EAAE,OAAO,CAAC;MAClC,OAAOJ,MAAM,CAACS,UAAU,GAAGL,cAAc;IAE3C,KAAK,cAAc;MACjB;MACA,OAAOJ,MAAM,CAACY,YAAY;IAE5B,KAAK,eAAe;MAClB,IAAIZ,MAAM,CAACK,gBAAgB,KAAK,CAAC,IAAIL,MAAM,CAACM,eAAe,KAAK,CAAC,EAAE,OAAO,CAAC;MAC3E,MAAMO,kBAAkB,GAAGb,MAAM,CAACS,UAAU,GAAGT,MAAM,CAACM,eAAe;MACrE,OAAQO,kBAAkB,IAAIb,MAAM,CAACK,gBAAgB,GAAG,GAAG,CAAC,GAAI,EAAE;IAEpE;MACE,OAAO,CAAC;EACZ;AACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;EACzC,MAAMC,SAAS,GAAG;IAChBP,UAAU,EAAE;MAAEQ,KAAK,EAAE,0BAA0B;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAI,CAAC;IACzEZ,aAAa,EAAE;MAAEU,KAAK,EAAE,gBAAgB;MAAEG,MAAM,EAAE,GAAG;MAAED,IAAI,EAAE;IAAI,CAAC;IAClEX,UAAU,EAAE;MAAES,KAAK,EAAE,sBAAsB;MAAEG,MAAM,EAAE,GAAG;MAAED,IAAI,EAAE;IAAI,CAAC;IACrEE,OAAO,EAAE;MAAEJ,KAAK,EAAE,UAAU;MAAEG,MAAM,EAAE,GAAG;MAAED,IAAI,EAAE;IAAI,CAAC;IACtDf,gBAAgB,EAAE;MAAEa,KAAK,EAAE,oBAAoB;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAI,CAAC;IACzEd,eAAe,EAAE;MAAEY,KAAK,EAAE,kBAAkB;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAE,CAAC;IAC1ER,YAAY,EAAE;MAAEM,KAAK,EAAE,sBAAsB;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAAE,CAAC;IACrEjB,aAAa,EAAE;MAAEe,KAAK,EAAE,gBAAgB;MAAEG,MAAM,EAAE,GAAG;MAAED,IAAI,EAAE;IAAK;EACpE,CAAC;EAED,MAAMG,QAAQ,GAAGN,SAAS,CAACF,GAAG,CAAC;EAC/B,MAAMS,cAAc,GAAGT,GAAG,KAAK,YAAY,GAAGC,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC,GACxCV,GAAG,CAACW,QAAQ,CAAC,MAAM,CAAC,IAAIX,GAAG,KAAK,cAAc,GAAGC,KAAK,CAACS,OAAO,CAAC,CAAC,CAAC,GACjEV,GAAG,KAAK,iBAAiB,GAAGY,IAAI,CAACC,KAAK,CAACZ,KAAK,CAAC,GAC7CW,IAAI,CAACC,KAAK,CAACZ,KAAK,CAAC;EAEvC,OAAO,GAAGO,QAAQ,CAACF,MAAM,IAAI,EAAE,GAAGG,cAAc,GAAGD,QAAQ,CAACJ,MAAM,IAAI,EAAE,EAAE;AAC5E,CAAC;AAED,OAAO,MAAMU,iBAAiB,GAAI7B,MAAM,IAAK;EAC3C,MAAME,cAAc,GAAGF,MAAM,CAACG,aAAa,GAAG,EAAE;EAChD,OAAOD,cAAc,IAAIF,MAAM,CAACK,gBAAgB,GAAG,GAAG,CAAC;AACzD,CAAC;AAED,OAAO,MAAMyB,iBAAiB,GAAIxB,eAAe,IAAK;EACpD,OAAO,CAACA,eAAe,GAAG,EAAE,EAAEmB,OAAO,CAAC,CAAC,CAAC;AAC1C,CAAC;AAED,OAAO,MAAMM,sBAAsB,GAAGA,CAACrB,UAAU,EAAEJ,eAAe,KAAK;EACrE,IAAIA,eAAe,KAAK,CAAC,IAAI,CAACI,UAAU,IAAIA,UAAU,IAAI,CAAC,EAAE,OAAO,CAAC;EACrE,MAAMsB,MAAM,GAAI,CAACL,IAAI,CAACM,GAAG,CAACvB,UAAU,EAAE,EAAE,GAACJ,eAAe,CAAC,GAAG,CAAC,IAAI,GAAI;EACrE,OAAO4B,KAAK,CAACF,MAAM,CAAC,GAAG,CAAC,GAAGA,MAAM;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}