{"ast":null,"code":"var _jsxFileName = \"/Users/nateritter/Sites/because-loan-calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { calculateSolvedValue, formatValue, getMonthlyPayment, getRepaymentYears, getEffectiveAnnualRate } from './calculator.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RBFCalculator = () => {\n  _s();\n  // Helper function to determine color class based on factor rate\n  const getFactorRateColorClass = factorRate => {\n    return factorRate <= 1 ? 'text-red-600 font-bold' : 'text-gray-800';\n  };\n  const [values, setValues] = useState({\n    factorRate: 1.5,\n    amountReceived: 5000,\n    revenueShareRate: 5,\n    repaymentPeriod: 24,\n    profitMargin: 16,\n    annualRevenue: 22000\n  });\n\n  // New state to track raw input values\n  const [inputValues, setInputValues] = useState({});\n  const [solveFor, setSolveFor] = useState('repaymentPeriod');\n\n  // Derived values that are always calculated\n  const derivedValues = {\n    repaymentObligation: values.amountReceived * values.factorRate,\n    costOfCapital: values.amountReceived * values.factorRate - values.amountReceived\n  };\n\n  // All variables for display purposes\n  const variables = {\n    factorRate: {\n      label: 'Factor Rate (multiplier)',\n      suffix: 'x',\n      step: 0.1\n    },\n    amountReceived: {\n      label: 'Amount Received ($)',\n      prefix: '$',\n      step: 100\n    },\n    repaymentObligation: {\n      label: 'Repayment Obligation',\n      prefix: '$',\n      step: 100\n    },\n    costOfCapital: {\n      label: 'Cost of Capital',\n      prefix: '$',\n      step: 100\n    },\n    revenueShareRate: {\n      label: 'Revenue Share Rate (%)',\n      suffix: '%',\n      step: 0.5\n    },\n    repaymentPeriod: {\n      label: 'Repayment Period (months)',\n      suffix: ' months',\n      step: 1\n    },\n    profitMargin: {\n      label: 'Annual Profit Margin (%)',\n      suffix: '%',\n      step: 1\n    },\n    annualRevenue: {\n      label: 'Annual Revenue',\n      prefix: '$',\n      step: 1000\n    }\n  };\n\n  // Variables that can be solved for (excluding derived values)\n  const solvableVariables = {\n    factorRate: {\n      label: 'Factor Rate (multiplier)',\n      suffix: 'x',\n      step: 0.1\n    },\n    amountReceived: {\n      label: 'Amount Received ($)',\n      prefix: '$',\n      step: 100\n    },\n    revenueShareRate: {\n      label: 'Revenue Share Rate (%)',\n      suffix: '%',\n      step: 0.5\n    },\n    repaymentPeriod: {\n      label: 'Repayment Period (months)',\n      suffix: ' months',\n      step: 1\n    },\n    profitMargin: {\n      label: 'Annual Profit Margin (%)',\n      suffix: '%',\n      step: 1\n    },\n    annualRevenue: {\n      label: 'Annual Revenue',\n      prefix: '$',\n      step: 1000\n    }\n  };\n  const handleInputChange = (key, newValue) => {\n    // Update the inputValues state with the raw input\n    setInputValues(prev => ({\n      ...prev,\n      [key]: newValue\n    }));\n\n    // Also update the main values state for immediate calculations\n    setValues(prev => ({\n      ...prev,\n      [key]: parseFloat(newValue) || 0\n    }));\n  };\n  const handleInputBlur = key => {\n    // When input loses focus, format the value and update both states\n    const rawValue = inputValues[key] || values[key] || 0;\n    const formattedValue = parseFloat(rawValue).toFixed(2);\n\n    // Update the main values state with the formatted value\n    setValues(prev => ({\n      ...prev,\n      [key]: parseFloat(formattedValue)\n    }));\n\n    // Update inputValues to show the formatted value\n    setInputValues(prev => ({\n      ...prev,\n      [key]: formattedValue\n    }));\n  };\n  const handleInputFocus = key => {\n    // When input gains focus, populate inputValues with current value if not already set\n    if (!(key in inputValues)) {\n      setInputValues(prev => ({\n        ...prev,\n        [key]: values[key] || 0\n      }));\n    }\n  };\n  const handleSolveForChange = newSolveFor => {\n    setSolveFor(newSolveFor);\n  };\n\n  // Combine state values with derived values for calculations\n  const calculationValues = {\n    ...values,\n    ...derivedValues\n  };\n  const solvedValue = calculateSolvedValue(calculationValues, solveFor);\n\n  // Update the solved value in our state for consistency\n  useEffect(() => {\n    // Only update state for solvable variables, not derived values\n    if (solvableVariables[solveFor]) {\n      setValues(prev => ({\n        ...prev,\n        [solveFor]: solvedValue\n      }));\n\n      // Also update inputValues for the solved value\n      setInputValues(prev => ({\n        ...prev,\n        [solveFor]: solvedValue.toFixed(2)\n      }));\n    }\n  }, [solveFor, solvedValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-4xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-2xl shadow-xl overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gradient-to-r from-blue-600 to-indigo-700 p-6 text-white\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-3xl font-bold text-center\",\n            children: \"Revenue Based Finance Calculator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center mt-2 opacity-90\",\n            children: \"Calculate RBF loan terms and payments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-50 p-6 border-t border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-bold text-gray-800 mb-2\",\n            children: \"How to Use:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600\",\n            children: \"Select the variable you want to calculate from the dropdown above, then enter values for all other fields. The calculator will automatically compute your selected variable and show a detailed summary below.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-8 p-6 bg-blue-50 rounded-xl border border-blue-100\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"solveForSelect\",\n              className: \"block text-lg font-medium text-gray-700 mb-3\",\n              children: \"What would you like to solve for?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"solveForSelect\",\n              value: solveFor,\n              onChange: e => handleSolveForChange(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n              children: Object.entries(solvableVariables).map(([key, variable]) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: key,\n                children: variable.label\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\",\n            children: Object.entries(variables).map(([key, variable]) => {\n              // Determine if this is a derived value (always calculated)\n              const isDerivedValue = key === 'repaymentObligation' || key === 'costOfCapital';\n              // Determine if this is the currently solved value\n              const isSolvedValue = key === solveFor;\n\n              // For derived values, we always show them as calculated\n              // For other values, follow the existing logic\n              const showAsCalculated = isDerivedValue || isSolvedValue;\n\n              // For derived values, use the derived value; for others, use state value or solved value\n              const displayValue = isDerivedValue ? derivedValues[key] : isSolvedValue ? solvedValue : values[key];\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `p-4 rounded-lg border-2 transition-all duration-200 ${isSolvedValue ? key === 'factorRate' && values.factorRate <= 1 ? 'bg-red-50 border-red-300 shadow-md' : 'bg-green-50 border-green-300 shadow-md' : 'bg-gray-50 border-gray-200'}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex justify-between items-start mb-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: showAsCalculated ? `calculated-${key}` : `input-${key}`,\n                    className: \"font-medium text-gray-700\",\n                    children: variable.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 23\n                  }, this), isSolvedValue && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `${key === 'factorRate' && values.factorRate <= 1 ? 'bg-red-500' : 'bg-green-500'} text-white text-xs px-2 py-1 rounded-full`,\n                    children: \"CALCULATED\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 21\n                }, this), showAsCalculated ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: `calculated-${key}`,\n                  className: \"text-2xl font-bold text-gray-800\",\n                  role: \"status\",\n                  \"aria-live\": \"polite\",\n                  \"data-testid\": `calculated-${key}`,\n                  children: formatValue(key, displayValue)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: `input-${key}`,\n                  type: \"number\",\n                  value: inputValues[key] !== undefined ? inputValues[key] : values[key] || 0,\n                  onChange: e => handleInputChange(key, e.target.value),\n                  onBlur: () => handleInputBlur(key),\n                  onFocus: () => handleInputFocus(key),\n                  step: variable.step,\n                  className: \"w-full p-3 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 23\n                }, this)]\n              }, key, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-xl border border-gray-200\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold text-gray-800 mb-4\",\n              children: \"Loan Summary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-white p-4 rounded-lg shadow-sm\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm text-gray-500 mb-1\",\n                  children: \"Monthly Payment\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-xl font-bold text-gray-800\",\n                  children: [\"$\", getMonthlyPayment(values).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-white p-4 rounded-lg shadow-sm\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm text-gray-500 mb-1\",\n                  children: \"Repayment Period (months)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-xl font-bold text-gray-800\",\n                  children: [getRepaymentYears(calculationValues.repaymentPeriod), \" years\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"bg-white p-4 rounded-lg shadow-sm\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-sm text-gray-500 mb-1\",\n                  children: \"Total Cost of Capital\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-xl font-bold text-gray-800\",\n                  children: [\"$\", derivedValues.costOfCapital.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-blue-50 p-4 rounded-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-bold text-gray-800 mb-2\",\n                children: \"Calculation Details:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"list-disc pl-5 space-y-1 text-gray-700\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Monthly Revenue: $\", (values.annualRevenue / 12).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Monthly Payment: \", values.revenueShareRate, \"% of monthly revenue\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Factor Rate: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: getFactorRateColorClass(values.factorRate),\n                    children: formatValue('factorRate', values.factorRate)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 36\n                  }, this), \" (pay back \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: getFactorRateColorClass(values.factorRate),\n                    children: formatValue('factorRate', values.factorRate)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 161\n                  }, this), \" borrowed amount)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [\"Effective Annual Rate: \", (getEffectiveAnnualRate(calculationValues.factorRate, calculationValues.repaymentPeriod) || 0).toFixed(2), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-50 p-6 border-t border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-bold text-gray-800 mb-2\",\n            children: \"How to Use:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-600\",\n            children: \"Select the variable you want to calculate from the dropdown above, then enter values for all other fields. The calculator will automatically compute your selected variable and show a detailed summary below.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(RBFCalculator, \"G5uUwSp0hl/EqQ6JMQWkWduPjlc=\");\n_c = RBFCalculator;\nexport default RBFCalculator;\nvar _c;\n$RefreshReg$(_c, \"RBFCalculator\");","map":{"version":3,"names":["React","useState","useEffect","calculateSolvedValue","formatValue","getMonthlyPayment","getRepaymentYears","getEffectiveAnnualRate","jsxDEV","_jsxDEV","RBFCalculator","_s","getFactorRateColorClass","factorRate","values","setValues","amountReceived","revenueShareRate","repaymentPeriod","profitMargin","annualRevenue","inputValues","setInputValues","solveFor","setSolveFor","derivedValues","repaymentObligation","costOfCapital","variables","label","suffix","step","prefix","solvableVariables","handleInputChange","key","newValue","prev","parseFloat","handleInputBlur","rawValue","formattedValue","toFixed","handleInputFocus","handleSolveForChange","newSolveFor","calculationValues","solvedValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","Object","entries","map","variable","isDerivedValue","isSolvedValue","showAsCalculated","displayValue","role","type","undefined","onBlur","onFocus","_c","$RefreshReg$"],"sources":["/Users/nateritter/Sites/because-loan-calculator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { calculateSolvedValue, formatValue, getMonthlyPayment, getRepaymentYears, getEffectiveAnnualRate } from './calculator.js';\n\nconst RBFCalculator = () => {\n  // Helper function to determine color class based on factor rate\n  const getFactorRateColorClass = (factorRate) => {\n    return factorRate <= 1 ? 'text-red-600 font-bold' : 'text-gray-800';\n  };\n\n  const [values, setValues] = useState({\n    factorRate: 1.5,\n    amountReceived: 5000,\n    revenueShareRate: 5,\n    repaymentPeriod: 24,\n    profitMargin: 16,\n    annualRevenue: 22000\n  });\n\n  // New state to track raw input values\n  const [inputValues, setInputValues] = useState({});\n\n  const [solveFor, setSolveFor] = useState('repaymentPeriod');\n\n  // Derived values that are always calculated\n  const derivedValues = {\n    repaymentObligation: values.amountReceived * values.factorRate,\n    costOfCapital: (values.amountReceived * values.factorRate) - values.amountReceived\n  };\n\n  // All variables for display purposes\n  const variables = {\n    factorRate: { label: 'Factor Rate (multiplier)', suffix: 'x', step: 0.1 },\n    amountReceived: { label: 'Amount Received ($)', prefix: '$', step: 100 },\n    repaymentObligation: { label: 'Repayment Obligation', prefix: '$', step: 100 },\n    costOfCapital: { label: 'Cost of Capital', prefix: '$', step: 100 },\n    revenueShareRate: { label: 'Revenue Share Rate (%)', suffix: '%', step: 0.5 },\n    repaymentPeriod: { label: 'Repayment Period (months)', suffix: ' months', step: 1 },\n    profitMargin: { label: 'Annual Profit Margin (%)', suffix: '%', step: 1 },\n    annualRevenue: { label: 'Annual Revenue', prefix: '$', step: 1000 }\n  };\n\n  // Variables that can be solved for (excluding derived values)\n  const solvableVariables = {\n    factorRate: { label: 'Factor Rate (multiplier)', suffix: 'x', step: 0.1 },\n    amountReceived: { label: 'Amount Received ($)', prefix: '$', step: 100 },\n    revenueShareRate: { label: 'Revenue Share Rate (%)', suffix: '%', step: 0.5 },\n    repaymentPeriod: { label: 'Repayment Period (months)', suffix: ' months', step: 1 },\n    profitMargin: { label: 'Annual Profit Margin (%)', suffix: '%', step: 1 },\n    annualRevenue: { label: 'Annual Revenue', prefix: '$', step: 1000 }\n  };\n\n  const handleInputChange = (key, newValue) => {\n    // Update the inputValues state with the raw input\n    setInputValues(prev => ({\n      ...prev,\n      [key]: newValue\n    }));\n\n    // Also update the main values state for immediate calculations\n    setValues(prev => ({\n      ...prev,\n      [key]: parseFloat(newValue) || 0\n    }));\n  };\n\n  const handleInputBlur = (key) => {\n    // When input loses focus, format the value and update both states\n    const rawValue = inputValues[key] || values[key] || 0;\n    const formattedValue = parseFloat(rawValue).toFixed(2);\n\n    // Update the main values state with the formatted value\n    setValues(prev => ({\n      ...prev,\n      [key]: parseFloat(formattedValue)\n    }));\n\n    // Update inputValues to show the formatted value\n    setInputValues(prev => ({\n      ...prev,\n      [key]: formattedValue\n    }));\n  };\n\n  const handleInputFocus = (key) => {\n    // When input gains focus, populate inputValues with current value if not already set\n    if (!(key in inputValues)) {\n      setInputValues(prev => ({\n        ...prev,\n        [key]: values[key] || 0\n      }));\n    }\n  };\n\n  const handleSolveForChange = (newSolveFor) => {\n    setSolveFor(newSolveFor);\n  };\n\n  // Combine state values with derived values for calculations\n  const calculationValues = { ...values, ...derivedValues };\n  const solvedValue = calculateSolvedValue(calculationValues, solveFor);\n\n  // Update the solved value in our state for consistency\n  useEffect(() => {\n    // Only update state for solvable variables, not derived values\n    if (solvableVariables[solveFor]) {\n      setValues(prev => ({\n        ...prev,\n        [solveFor]: solvedValue\n      }));\n\n      // Also update inputValues for the solved value\n      setInputValues(prev => ({\n        ...prev,\n        [solveFor]: solvedValue.toFixed(2)\n      }));\n    }\n  }, [solveFor, solvedValue]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n          <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 p-6 text-white\">\n            <h1 className=\"text-3xl font-bold text-center\">Revenue Based Finance Calculator</h1>\n            <p className=\"text-center mt-2 opacity-90\">Calculate RBF loan terms and payments</p>\n          </div>\n{/* How to Use Information */}\n            <div className=\"bg-gray-50 p-6 border-t border-gray-200\">\n              <h3 className=\"font-bold text-gray-800 mb-2\">How to Use:</h3>\n              <p className=\"text-gray-600\">\n                Select the variable you want to calculate from the dropdown above, then enter values for all other fields.\n                The calculator will automatically compute your selected variable and show a detailed summary below.\n              </p>\n            </div>\n\n          <div className=\"p-6\">\n            {/* Solve For Selection */}\n            <div className=\"mb-8 p-6 bg-blue-50 rounded-xl border border-blue-100\">\n              <label htmlFor=\"solveForSelect\" className=\"block text-lg font-medium text-gray-700 mb-3\">\n                What would you like to solve for?\n              </label>\n              <select\n                id=\"solveForSelect\"\n                value={solveFor}\n                onChange={(e) => handleSolveForChange(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg text-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {Object.entries(solvableVariables).map(([key, variable]) => (\n                  <option key={key} value={key}>\n                    {variable.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Input Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n              {Object.entries(variables).map(([key, variable]) => {\n                // Determine if this is a derived value (always calculated)\n                const isDerivedValue = key === 'repaymentObligation' || key === 'costOfCapital';\n                // Determine if this is the currently solved value\n                const isSolvedValue = key === solveFor;\n\n                // For derived values, we always show them as calculated\n                // For other values, follow the existing logic\n                const showAsCalculated = isDerivedValue || isSolvedValue;\n\n                // For derived values, use the derived value; for others, use state value or solved value\n                const displayValue = isDerivedValue\n                  ? derivedValues[key]\n                  : (isSolvedValue ? solvedValue : values[key]);\n\n                return (\n                  <div key={key} className={`p-4 rounded-lg border-2 transition-all duration-200 ${\n                    isSolvedValue ? (key === 'factorRate' && values.factorRate <= 1 ? 'bg-red-50 border-red-300 shadow-md' : 'bg-green-50 border-green-300 shadow-md') : 'bg-gray-50 border-gray-200'\n                  }`}>\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <label\n                        htmlFor={showAsCalculated ? `calculated-${key}` : `input-${key}`}\n                        className=\"font-medium text-gray-700\"\n                      >\n                        {variable.label}\n                      </label>\n                      {isSolvedValue && (\n                        <span className={`${\n                          key === 'factorRate' && values.factorRate <= 1\n                            ? 'bg-red-500'\n                            : 'bg-green-500'\n                        } text-white text-xs px-2 py-1 rounded-full`}>\n                          CALCULATED\n                        </span>\n                      )}\n                    </div>\n\n                    {showAsCalculated ? (\n                      <div\n                        id={`calculated-${key}`}\n                        className=\"text-2xl font-bold text-gray-800\"\n                        role=\"status\"\n                        aria-live=\"polite\"\n                        data-testid={`calculated-${key}`}\n                      >\n                        {formatValue(key, displayValue)}\n                      </div>\n                    ) : (\n                      <input\n                        id={`input-${key}`}\n                        type=\"number\"\n                        value={inputValues[key] !== undefined ? inputValues[key] : (values[key] || 0)}\n                        onChange={(e) => handleInputChange(key, e.target.value)}\n                        onBlur={() => handleInputBlur(key)}\n                        onFocus={() => handleInputFocus(key)}\n                        step={variable.step}\n                        className=\"w-full p-3 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                      />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Summary Information */}\n            <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-xl border border-gray-200\">\n              <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Loan Summary</h2>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                  <div className=\"text-sm text-gray-500 mb-1\">Monthly Payment</div>\n                  <div className=\"text-xl font-bold text-gray-800\">\n                    ${getMonthlyPayment(values).toFixed(2)}\n                  </div>\n                </div>\n\n                <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                  <div className=\"text-sm text-gray-500 mb-1\">Repayment Period (months)</div>\n                  <div className=\"text-xl font-bold text-gray-800\">\n                    {getRepaymentYears(calculationValues.repaymentPeriod)} years\n                  </div>\n                </div>\n\n                <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n                  <div className=\"text-sm text-gray-500 mb-1\">Total Cost of Capital</div>\n                  <div className=\"text-xl font-bold text-gray-800\">\n                    ${derivedValues.costOfCapital.toFixed(2)}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h3 className=\"font-bold text-gray-800 mb-2\">Calculation Details:</h3>\n                <ul className=\"list-disc pl-5 space-y-1 text-gray-700\">\n                  <li>Monthly Revenue: ${(values.annualRevenue / 12).toFixed(2)}</li>\n                  <li>Monthly Payment: {values.revenueShareRate}% of monthly revenue</li>\n                  <li>Factor Rate: <span className={getFactorRateColorClass(values.factorRate)}>{formatValue('factorRate', values.factorRate)}</span> (pay back <span className={getFactorRateColorClass(values.factorRate)}>{formatValue('factorRate', values.factorRate)}</span> borrowed amount)</li>\n                  <li>Effective Annual Rate: {(getEffectiveAnnualRate(calculationValues.factorRate, calculationValues.repaymentPeriod) || 0).toFixed(2)}%</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"bg-gray-50 p-6 border-t border-gray-200\">\n            <h3 className=\"font-bold text-gray-800 mb-2\">How to Use:</h3>\n            <p className=\"text-gray-600\">\n              Select the variable you want to calculate from the dropdown above, then enter values for all other fields.\n              The calculator will automatically compute your selected variable and show a detailed summary below.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RBFCalculator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}